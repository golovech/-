package days20;

import java.util.ArrayList;

public class Today {
	/**
	 * ***************************  오 늘 의    총 정 리  ***************************
	 * 
	 * 				Set : [Tree]Set 클래스
	 * 				Map : [Tree]Map 클래스 + key값
	 *							ㄴ 많은 데이터의 검색, 정렬, 범위검색 성능이 빠르다.
	 *
	 *				 [Sorted]Map 정렬된 맵
	 *		    	 Map - Hm, Ht, Sm, Tm
	 *
	 *  =============================================================================
	 *
	 *				[ Properties 컬렉션 클래스 예제 ]
	 * 				1. key(String) + value(String) = map
	 * 				2. 환경설정값을 쓰기/읽기 할때 사용함.
	 * 				3. setProperty() 쓰기 / getProperty() 읽기
	 * 				4. 파일(.properties) 저장
	 * 				   p.store( FileWrite, 주석문 )
	 * 				   p.storeToXML( FileOutputStream, 주석문 )
	 * 
	 * 
	 * 				[ Properties 컬렉션 클래스 예제 2 ]
	 * 				Ex03.java 의 jdbcConfig.pro~~파일을 사용해 환경설정값을 얻어오는 예제
	 * 									  p.load(FileReader)
	 * 							  value = p.getProperty(key)
	 *									  p.keySet() 모든 키를 얻어와서 value 출력함.
	 * 
	 *  ==================================================================================
	 * 
	 * 		 	[ Map ] : HT, HM, TM, SM,  Properties 컬렉션클래스
	 * 			1. HashTable<String, String> == Properties
	 * 			2. key + value = Entry
	 * 			3. 환경 설정값들을 파일로 쓰기 / 읽기 할때 사용!!
	 * 									  put() / get()
	 *								setProperties() / getProperties()
	 * 			4. 저장되는 파일확장자 :	.properties
	 *	  							store(), storeToXML() // 저장할때(쓰기)
	 *	  							load()  // 읽어올때
	 *
	 *  ==================================================================================
	 *
	 *				[ Arrays 클래스 예제 ]
	 *		 		Arrays 클래스란? => 배열을 사용하기 쉽도록 구현된 클래스
	 *				int [] m = {3,5,2,4,1};
	 *				Arrays.sort(m); // 정렬
	 *				Arrays.binarySearch(m, 5); // 값 검색
	 *				Arrays.toString(m); // 출력
	 *				Arrays.fill(m, -1); // -1값으로 전부 채우겠다.
	 *				System.out.println(Arrays.toString(m)); // 출력
	 *
	 *  ==================================================================================
	 *  
	 *		  		[ 내부(inner) 클래스 == 중첩 클래스, 중첩 인터페이스 ]
	 *  				ㄴ 클래스 안에 선언되는 클래스
	 *  				ㄴ 장점 : 내부 클래스 --> 외부 클래스의 멤버들을 쉽게 접근할 수 있다.
	 *  						  코드의 복잡성을 줄일 수 있다.
	 *  
	 *  
	 * 		 class Car{
	 *					Engine engine; // has - a 관계
	 *					}
	 *					
	 *		 class Car{ // 외부 클래스
	 *					class Engine { // 내부 클래스
	 *									} 
	 *					}
	 *			ㄴ AWT, swing 에서 자주 사용
	 *			
	 *			ㄴ 내부 클래스의 종류
	 *			  1) 인스턴스 클래스
	 *			  2) static 클래스
	 *			  3) 로컬 클래스 - 외부 클래스의
	 *			  				   메서드 내부, 초기화 블럭에 선언된 클래스
	 *			  				   메서드가 실행될 때만 사용할 수 있다.
	 *			  4) 익명 클래스
	 *			  
	 *  ==================================================================================	  
	 * 	 
	 *		 [익명 클래스 == 무명 == Anonymous 클래스]
	 *	 	1. 이름이 없는 클래스 ( \ _ / ) /
	 *		2. 선언 형식
	 *	   	   new 부모클래스명 ( 매개변수... ){
	 *	    		@Overide
	 *	    		부모메서드(){
	 *	    		}
	 *	    		@Overide
	 *	    		부모메서드(){
	 *	    		} //   ==>  몇개든 생성가능
	 *	   		 }
	 *	    
	 *	    	================================
	 *	    
	 *	    	new 부모인터페이스 () {
	 *	    		@Overide
	 *	    		부모메서드(){
	 *	    		}
	 *	    		@Overide
	 *	    		부모메서드(){
	 *	    		}
	 *		    } //  ==> 부모메서드만 오버라이딩 가능
	 *
	 *  ==================================================================================	  
	 *
	 *			 [제네릭(Generics)] 
	 * 			1. jdk 1.5 - 제네릭
	 *   		   jdk 1.8 - 람다식
	 * 			2. 제네릭이란?
	 *   		 < 다양한 타입 >의 객체를 다루는 메서드 or 컬렉션 클래스를 < 컴파일 > 할때,
	 *    			타입을 체크해주는 기능
	 *   			ex) ArraysList<  제 네 릭  >
	 * 			3. 왜 사용할까? -> 제네릭의 장점
	 *   		 1) 객체의 타입 안전성을 높이기 위해서
	 *    		 2) 형 변환의 번거로움을 줄이기 위해서
	 * 
	 *			Ex )
	 *			ArrayList<String> list = new ArrayList<String>();
	 *			list.add("최사랑");
	 *			list.add("이게제네릭이다"); // String만 올 수 있게 해줌.
	 *			String name = list.get(0);
	 *
	 *  -------------------------------------------------------------------------
	 *
	 * 			1. 제네릭 타입은 클래스, 메서드에 선언할 수 있다.
	 *   			 1) 제네릭 클래스 !
	 *    			 2) 제네릭 메서드
	 *
	 * 						T
	 *						E
	 * 						K
	 * 						V
	 *
	 *				원시타입 (Raw Type)
	 *  				↓
	 *				Box<T>		제네릭 클래스, 'T' 의 Box
	 *				  T			타입변수 또는 타입 매개변수
	 *				T, E, K, V 등등 -> 타입변수
	 *
	 *  -----------------------------------------------------------------------
	 *
	 * 				[ 제네릭의 제한 ]
	 * 				제한 1) 제네릭클래스에는 클래스변수 선언 X
	 * 				제한 2) 클래스 메서드에 T타입 사용 X
	 *
	 * 				==>  스태틱이랑 같이 못쓴다!
	 * 
	 * 				 [ 제네릭 메서드 ]
	 *				ㄴ 메서드의 선언부에 제네릭타입이 선언된 메서드
	 *					: 제네릭 메서드
	 *				ㄴ 선언형식
	 *					접근지정자 static <T> 리턴자료형 제네릭메서드명(매개변수...){ }
	 *
	 * 
	 * 				 [ 제네릭 메서드 예제 ]
	 *
	 * 		 public static void printAll(ArrayList<? extends Product> list, ArrayList<? extends Product> list2){}
	 *		 public static <T extends Product>void printAll(ArrayList<T> list, ArrayList<T> list2){}
	 * 			(위 두개는 똑같은 코딩.)
	 *
	 *  ==================================================================================	
	 *
	 * 		<? extends T>
	 * 		<? super T>
	 *				<?> == <? extends Object>
	 *				 ㄴ>  와일드 카드
	 *
	 *  ==================================================================================	
	 *
	 * 					*** 열거형(enums) ***
	 * 				1. jdk 1.5 에 추가
	 * 				2. 서로 관련된 상수를 편리하게 사용하기 위한것.
	 * 				예) 성별 - 남자, 여자
	 * 					int gender = 1/0;
	 * 					boolean gender = false/true;
	 * 					char gender = 'm'/'f';   등등 . . .
	 * 				3. 열거형 선언 형식
	 * 				   접근지정자 enum 열거형이름 { 
	 * 				   상수명, 상수명 . . . (대문자 사용함)
	 * 					}
	 * 				4. 열거형이름.상수명
	 * 				5. 열거형은 컴파일 될때 클래스로 바뀌어 컴파일됨.
	 * 					extends java.lang.Enum 클래스 상속받아 컴파일됨.
	 * 				6. Enum 클래스
	 * 					ㄴ	ordinal() : 열거형 상수가 정의된 순서 반환
	 * 					ㄴ	name()	  : 열거형 상수명을 문자열로 반환하는 함수
	 * 					ㄴ	valueOf() : name()와 일치하는 "열거형 상수"를 반환.
	 * 				
	 * 
	 * */













}


