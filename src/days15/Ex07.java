package days15;
/**
 * @author love
 * @date 2024. 7. 19. - 오후 2:47:12
 * @subject		[ 인터페이스(interface) ]
 * @content		1. 자바 [자료형] - 참조타입 : 배열, 클래스, [인터페이스]
 * 				2. 일종의 추상클래스다 => 추상화보다 더 추상화정도가 높다.
 * 				3. 필드(멤버변수)를 선언할 수 없다.
 *				   일반 메서드 선언할 수 X
 *
 *				   <상수> 만 선언 가능
 *				   <추상메서드> 만 선언 가능.
 *                       +
 *                 [jdk1.8부터 추가]
 *                  static 메서드
 *                  default 메서드
 *                  
 *               4. 추상클래스 - 미완성 설계도						-> 구현한 자식클래스
 *                  인터페이스 - 밑그림만 그린 설계도 (기본설계도)	-> 구현한 자식클래스부터 객체 생성가능.
 *                  : 그 자체만으로 사용되기 보다는,
 *                  다른 클래스를 작성하는 데에 도움을 주는 목적으로 사용.
 *               5. 인터페이스 선언 형식
 *                  [public or default] interface / [대]인터페이스이름 {
 *                  	상수, 추상메서드, d메, s메
 *                  }
 *               6. 인터페이스 안의 모든 멤버는
 *               	public static final 생략해도 된다.
 *               	public abstract 	생략
 *               7. 인터페이스 끼리 상속이 가능하다.
 *               	( extends 키워드 사용 )
 *               8. 인터페이스를 사용하면 <다중상속>이 가능하다.   
 *               9. 클래스 / implements / 인터페이스
 *               				구현한		(인터페이스를 구현한 클래스)
 *               10. 인터페이스의 장점
 *                  1) 개발 시간을 단축시킬 수 있다.
 *                     바로 메서드 호출해서 사용 가능.
 *                  2) 표준화가 가능 (같은 인터페이스로 개발하기 때문에...)
 *                  3) 서로 관계없는 클래스여도 관계를 맺어줄 수 있다.
 *                     (같은 인터페이스를 참고함으로서)(상속관계가 아니더라도)(인터페이스 매개변수 다형성)
 *                  4) 독립적인 프로그래밍이 가능하다. (개발시간 단축)
 *
 */
public class Ex07 {

	public static void main(String[] args) {
		

	} // main

} // class



