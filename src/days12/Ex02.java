package days12;

public class Ex02 {

	public static void main(String[] args) {
		// Class!!
		
		/*
		 * 1. 객체 지향적 프로그래밍 
		 *		Object Oriented Programing
		 *		OOP 		
		 *		컴퓨터 부품 조립하듯이 [객체(Object)] 를 조립하는 프로그래밍.
		 *		
		 * 2. [ Class == 객체 설계도 ]
		 * 		집 부품 == 객체
		 * 3. 객체 : 클래스를 사용하는 참조변수
		 * 		유형(사물), 무형(개념)의 객체가 존재.
		 * 		= 속성 + 동작(기능)
		 * 4. 인스턴스(Instance) = 클래스로부터 <생성된 객체>
		 * 5. 인스턴스화 : 클래스(설계도) -> 객체(집)을 생성하는 과정.
		 * 
		 * 6. 클래스를 설계하는 과정.
		 * 		1) 객체 구성요소(특징,기능) 파악 -> 목록 작성.
		 * 		2) 클래스 선언 
		 * 		3) 객체 생성
		 * 		4) 테스트 작업
		 * 		5) 문제점 발생하면 -> 유지, 보수
		 * 		6) 상용화 (배포)
		 * 		7) 버전 관리 - 기능 추가, 보수(보안)
		 * 
		 *  7. OOP의 특징 == 클래스의 특징
		 *  	1) 캡슐화
		 *  	2) 상속성
		 *  	3) 다형성
		 *  	4) 은닉화
		 *  	5) 추상화
		 *  
		 *   8. 객체(클래스)간의 관계
		 *   	1) 집합관계		has-a 관계
		 *   	2) 사용관계		X
		 *   	3) 상속관계		is-a 관계
		 *   
		 *   예) 망치
		 *   	 설계도 == 클래스
		 *   	 기능(용도): 못 쳐, 빼.
		 *   	 특징(속성): 고무, 나무, 크기 등등...
		 *   
		 *   9. 클래스 선언 형식
		 *   	 [접근지정자] [기타제어자] class [클래스명]
		 *   	 [extends Super클래스]
		 *   	 [implements 인터페이스 . . .]
		 *   {
		 *   		클래스의 구성요소 (멤버)
		 *   		1) 속성 == 특징 == property			멤버변수 (필드 field)		로 선언되어짐.
		 *   		2) 기능 == 동작(일) == function		멤버함수 (메서드 method)
		 *   }
		 *   
		 *   
		 *  
		 */
		
		
		

	}

}
